<?php echo '<?php' . "\n"; ?>
namespace <?php echo $this->dataObject->getNamespace(); ?>\DAO;

use Doctrine\ORM\EntityManager;
use <?php echo $this->dataObject->getNamespace(); ?>\Hydrator\<?php echo $this->dataObject->getEntityName(); ?>Hydrator;
use <?php echo $this->dataObject->getNamespace(); ?>\DataObject\<?php echo $this->dataObject->getEntityName(); ?>DataObject;
use <?php echo $this->dataObject->getNamespace(); ?>\DataObject\<?php echo $this->dataObject->getEntityName(); ?>Collection;
use <?php echo $this->dataObject->getEntity(); ?>;
use <?php echo $this->dataObject->getNamespace(); ?>\No<?php echo $this->dataObject->getEntityName(); ?>Exception;

class <?php echo $this->dataObject->getEntityName(); ?>DAO
{
    /**
     * @var EntityManager
     */
    private $entityManager = null;
    /**
     * @var <?php echo $this->dataObject->getEntityName(); ?>Hydrator
     */
    private $hydrator      = null;

    /**
     * @param EntityManager $entityManager
     * @param <?php echo $this->dataObject->getEntityName(); ?>Hydrator $hydrator
     */
    public function __construct(EntityManager $entityManager, <?php echo $this->dataObject->getEntityName(); ?>Hydrator $hydrator)
    {
        $this->entityManager           = $entityManager;
        $this->hydrator     = $hydrator;
    }

    /**
     * @param DataObject $<?php echo lcfirst($this->dataObject->getEntityName()) . "\n"; ?>
     * @throws No<?php echo $this->dataObject->getEntityName(); ?>Exception
     * @return <?php echo $this->dataObject->getEntityName(); ?>DataObject
     */
    public function find(<?php echo $this->dataObject->getEntityName(); ?>DataObject $<?php echo lcfirst($this->dataObject->getEntityName()); ?>)
    {
        $entity = $this->entityManager->getRepository('<?php echo $this->dataObject->getEntity(); ?>')->findOneBy(array('id' => $<?php echo lcfirst($this->dataObject->getEntityName()); ?>->getId()));

        if(empty($entity)) {
            throw new No<?php echo $this->dataObject->getEntityName(); ?>Exception('<?php echo $this->dataObject->getEntityName(); ?> not found');
        }

        return $this->hydrator->entityToPopo(
            $entity,
            new <?php echo $this->dataObject->getEntityName(); ?>DataObject()
        );
    }

    /**
     * @return <?php echo $this->dataObject->getEntityName(); ?>Collection
     */
    public function findAll()
    {
        $entities = $this->entityManager->getRepository('<?php echo $this->dataObject->getEntity(); ?>')->findAll();

        return $this->hydrator->entityCollectionToPopoCollection(
            $entities,
            new <?php echo $this->dataObject->getEntityName(); ?>Collection(),
            new <?php echo $this->dataObject->getEntityName(); ?>DataObject()
        );
    }

    /**
     * @param <?php echo $this->dataObject->getEntityName(); ?>DataObject $<?php echo lcfirst($this->dataObject->getEntityName()) . "\n"; ?>
     * @return <?php echo $this->dataObject->getEntityName(); ?>DataObject
     */
    public function persist(<?php echo $this->dataObject->getEntityName(); ?>DataObject $<?php echo lcfirst($this->dataObject->getEntityName()); ?>)
    {
        $entity = $this->hydrator->popoToEntity(
            $<?php echo lcfirst($this->dataObject->getEntityName()); ?>,
            new <?php echo $this->dataObject->getEntityName(); ?>()
        );

        $this->entityManager->persist($entity);
        $this->entityManager->flush();

        return $this->hydrator->entityToPopo(
            $entity,
            new <?php echo $this->dataObject->getEntityName(); ?>DataObject()
        );
    }

    /**
     * @param <?php echo $this->dataObject->getEntityName(); ?>DataObject $<?php echo lcfirst($this->dataObject->getEntityName()) . "\n"; ?>
     * @return <?php echo $this->dataObject->getEntityName(); ?>DataObject
     */
    public function modify(<?php echo $this->dataObject->getEntityName(); ?>DataObject $<?php echo lcfirst($this->dataObject->getEntityName()); ?>)
    {
        $entity = $this->entityManager->getRepository('<?php echo $this->dataObject->getEntity(); ?>')->findOneBy(array('id' => $<?php echo lcfirst($this->dataObject->getEntityName()); ?>->getId()));

        if(empty($entity)) {
            throw new No<?php echo $this->dataObject->getEntityName(); ?>Exception('<?php echo $this->dataObject->getEntityName(); ?> not found');
        }

        $entity = $this->hydrator->popoToEntity(
            $<?php echo lcfirst($this->dataObject->getEntityName()); ?>,
            $entity
        );

        $this->entityManager->persist($entity);
        $this->entityManager->flush();

        return $this->hydrator->entityToPopo(
            $entity,
            new <?php echo $this->dataObject->getEntityName(); ?>DataObject()
        );
    }

    /**
     * @param <?php echo $this->dataObject->getEntityName(); ?>DataObject $<?php echo lcfirst($this->dataObject->getEntityName()) . "\n"; ?>
     * @throws No<?php echo $this->dataObject->getEntityName(); ?>Exception
     */
    public function remove(<?php echo $this->dataObject->getEntityName(); ?>DataObject $<?php echo lcfirst($this->dataObject->getEntityName()); ?>)
    {
        $entity = $this->entityManager->getRepository('<?php echo $this->dataObject->getEntity(); ?>')->findOneBy(array('id' => $<?php echo lcfirst($this->dataObject->getEntityName()); ?>->getId()));

        if(empty($entity)) {
            throw new No<?php echo $this->dataObject->getEntityName(); ?>Exception('<?php echo $this->dataObject->getEntityName(); ?> not found');
        }

        $this->entityManager->remove($entity);
        $this->entityManager->flush();
    }
}