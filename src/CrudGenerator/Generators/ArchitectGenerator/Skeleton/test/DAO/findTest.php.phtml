<?php
echo '<?php' . "\n";
?>
namespace <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\DAO;

<?php echo $this->getHelper('TemplateServiceContainer')->getFullClassForUnitTest(); ?>
use <?php echo $this->hydratorNamespace; ?>;
use <?php echo $this->dtoNamespace; ?>;
use <?php echo $this->daoNamespace; ?>;

use <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\<?php echo $this->entityName; ?>Fixture;

class FindTest extends \PHPUnit_Framework_TestCase
{
    public function testFind()
    {
        $dataObject = new <?php echo $this->dataObjectName; ?>();
        $dataObject->setId($entity->getId());

        $sUT = new <?php echo $this->daoName; ?>(
            $this->get<?php echo $this->getHelper('TemplateDatabaseConnector')->getClassName(); ?>(),
            new <?php echo $this->hydratorName; ?>()
        );

        $results = $sUT->find($dataObject);

        $this->assertEquals($dataObject->getId(), $results->getId());

        $this->assertInstanceOf(
            '<?php echo $this->dtoNamespace; ?>',
            $<?php echo $this->entityName; ?>Data
        );
    }

    public function testError()
    {
        $dataObject = new <?php echo $this->dataObjectName; ?>();
        $dataObject->setId('10000');

        $sUT = new <?php echo $this->daoName; ?>(
            $this->get<?php echo $this->getHelper('TemplateDatabaseConnector')->getClassName(); ?>(),
            new <?php echo $this->hydratorName; ?>()
        );

        $this->setExpectedException('<?php echo $this->exceptionNamespace; ?>');

        $sUT->find($dataObject);
    }

    /**
     * @return <?php echo $this->getHelper('TemplateDatabaseConnector')->getFullClass() . "\n"; ?>
     */
    private function get<?php echo $this->getHelper('TemplateDatabaseConnector')->getClassName(); ?>()
    {
        <?php echo $this->getHelper('TemplateServiceContainer')->getCreateInstanceForUnitTest() . "\n" ?>
        return <?php echo $this->getHelper('TemplateDatabaseConnector')->getCreateInstance() . "\n"; ?>
    }
}

