<?php echo '<?php' . "\n"; ?>
namespace <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\DAO;

use ApplicationTest\FixtureManager;
use <?php echo $this->dataObject->getNamespace(); ?>\DAO\<?php echo $this->dataObject->getEntityName(); ?>DAO;
use <?php echo $this->dataObject->getNamespace(); ?>\DataObject\<?php echo $this->dataObject->getEntityName(); ?>DataObject;
use <?php echo $this->dataObject->getNamespace(); ?>\Hydrator\<?php echo $this->dataObject->getEntityName(); ?>Hydrator;
use <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\<?php echo $this->dataObject->getEntityName(); ?>Fixture;

class removeTest extends \PHPUnit_Framework_TestCase
{
    public function testRemove()
    {
        FixtureManager::purge();
        $em = FixtureManager::getEm();

<?php
$keyTestable = array();
$columnCollection = $this->dataObject->getMetadata()->getColumnCollection(true);
foreach($columnCollection as $field => $metadata):
$keyToTest = null;
$modifiedValue = $this->getHelper('FixtureRenderer')->render($metadata);
?>
        $<?php echo $metadata->getName(); ?> = <?php echo $this->getHelper('FixtureRenderer')->render($metadata); ?>;
<?php endforeach; ?>

        $dto = new <?php echo $this->dataObject->getEntityName(); ?>DataObject();
        $dto<?php
        $columnCollection = $this->dataObject->getMetadata()->getColumnCollection(true);
        foreach($columnCollection as $field => $metadata):
if(null === $keyToTest) {
    $keyToTest = $metadata->getName();
}
?>
           ->set<?php echo ucfirst($metadata->getName()); ?>($<?php echo $metadata->getName(); ?>)<?php if($metadata == end($columnCollection)): ?>;<?php endif; ?><?php echo "\n"; ?>
<?php endforeach; ?>

        $<?php echo $this->dataObject->getEntityName(); ?>DAO = new <?php echo $this->dataObject->getEntityName(); ?>DAO($em, new <?php echo $this->dataObject->getEntityName(); ?>Hydrator());
        $dtoPersisted = $<?php echo $this->dataObject->getEntityName(); ?>DAO->persist($dto);

        $<?php echo $this->dataObject->getEntityName(); ?>DAO->remove($dtoPersisted);

        $this->setExpectedException('<?php echo $this->dataObject->getNamespace(); ?>\No<?php echo $this->dataObject->getEntityName(); ?>Exception');
        $<?php echo $this->dataObject->getEntityName(); ?>DAO->find($dtoPersisted);
    }

    public function testRemoveFailed()
    {
        FixtureManager::purge();
        $em = FixtureManager::getEm();

        $<?php echo $this->dataObject->getEntityName(); ?>DAO = new <?php echo $this->dataObject->getEntityName(); ?>DAO($em, new <?php echo $this->dataObject->getEntityName(); ?>Hydrator());

        $dto = new <?php echo $this->dataObject->getEntityName(); ?>DataObject();

        $this->setExpectedException('<?php echo $this->dataObject->getNamespace(); ?>\No<?php echo $this->dataObject->getEntityName(); ?>Exception');
        $<?php echo $this->dataObject->getEntityName(); ?>DAO->remove($dto);
    }
}

