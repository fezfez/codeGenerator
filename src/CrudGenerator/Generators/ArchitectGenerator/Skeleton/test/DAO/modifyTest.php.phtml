<?php echo '<?php' . "\n"; ?>
namespace <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\DAO;

use ApplicationTest\FixtureManager;
use <?php echo $this->dataObject->getNamespace(); ?>\DAO\<?php echo $this->dataObject->getEntityName(); ?>DAO;
use <?php echo $this->dataObject->getNamespace(); ?>\DataObject\<?php echo $this->dataObject->getEntityName(); ?>DataObject;
use <?php echo $this->dataObject->getNamespace(); ?>\Hydrator\<?php echo $this->dataObject->getEntityName(); ?>Hydrator;
use <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\<?php echo $this->dataObject->getEntityName(); ?>Fixture;

<?php
    $loremIpsumGenerator = new \CrudGenerator\Generators\LoremIpsumGenerator();
?>
class modifyTest extends \PHPUnit_Framework_TestCase
{
    public function testRemove()
    {
        FixtureManager::purge();
        $em = FixtureManager::getEm();

<?php
$fixtureRender = (function($metadata) use($loremIpsumGenerator) {
    if($metadata->getType() == 'integer' || $metadata->getType() == 'float') {
        return rand(0, 50);
    } elseif($metadata->getType() == 'string') {
        return '"' . substr($loremIpsumGenerator->getContent($metadata->getLength(), 'plain'), 0, $metadata->getLength()) . '"';
    } elseif($metadata->getType() == 'date') {
        return 'new DateTime()';
    } elseif($metadata->getType() == 'bool') {
        return 'true';
    }
});

$keyTestable = array();
foreach($this->dataObject->getMetadata()->getColumnCollection() as $field => $metadata):/*
if(isset($metadata['id']) && $metadata['id'] == true) {
    continue;
}*/
$keyToTest = null;
$modifiedValue = $fixtureRender($metadata);
?>
        $<?php echo $metadata->getName(); ?> = <?php echo $fixtureRender($metadata); ?>;
<?php endforeach; ?>

        $dto = new <?php echo $this->dataObject->getEntityName(); ?>DataObject();
        $dto<?php foreach($this->dataObject->getMetadata()->getColumnCollection() as $field => $metadata): ?>
<?php
/*
if(isset($metadata['id']) && $metadata['id'] == true) {
    continue;
}*/
if(null === $keyToTest) {
    $keyToTest = $metadata->getName();
}
?>
           ->set<?php echo ucfirst($metadata->getName()); ?>($<?php echo $metadata->getName(); ?>)<?php if($metadata == end($this->dataObject->getMetadata()->getColumnCollection())): ?>;<?php endif; ?><?php echo "\n"; ?>
<?php endforeach; ?>

        $<?php echo $this->dataObject->getEntityName(); ?>DAO = new <?php echo $this->dataObject->getEntityName(); ?>DAO($em, new <?php echo $this->dataObject->getEntityName(); ?>Hydrator());
        $dtoPersisted = $<?php echo $this->dataObject->getEntityName(); ?>DAO->persist($dto);

        $entity = $em->getRepository('<?php echo $this->dataObject->getEntity(); ?>')->findOneBy(array('<?php echo $keyToTest; ?>' => $<?php echo $keyToTest; ?>));

<?php foreach($this->dataObject->getMetadata()->getColumnCollection() as $field => $metadata): ?>
<?php
/*
if(isset($metadata['id']) && $metadata['id'] == true) {
    continue;
}*/
?>
        $this->assertEquals($<?php echo $metadata->getName(); ?>, $entity->get<?php echo ucfirst($metadata->getName()); ?>());
<?php endforeach; ?>

        $dtoPersisted->set<?php echo ucfirst($keyToTest); ?>(<?php echo $modifiedValue; ?>);
        $dtoModified = $<?php echo $this->dataObject->getEntityName(); ?>DAO->modify($dtoPersisted);

        $dtoTestable =  $<?php echo $this->dataObject->getEntityName(); ?>DAO->find($dtoModified);

        $this->assertEquals(<?php echo $modifiedValue; ?>, $entity->get<?php echo ucfirst($keyToTest); ?>());
    }

    public function testModifyFailed()
    {
        FixtureManager::purge();
        $em = FixtureManager::getEm();

        $<?php echo $this->dataObject->getEntityName(); ?>DAO = new <?php echo $this->dataObject->getEntityName(); ?>DAO($em, new <?php echo $this->dataObject->getEntityName(); ?>Hydrator());

        $dto = new <?php echo $this->dataObject->getEntityName(); ?>DataObject();

        $this->setExpectedException('<?php echo $this->dataObject->getNamespace(); ?>\No<?php echo $this->dataObject->getEntityName(); ?>Exception');
        $<?php echo $this->dataObject->getEntityName(); ?>DAO->modify($dto);
    }
}

