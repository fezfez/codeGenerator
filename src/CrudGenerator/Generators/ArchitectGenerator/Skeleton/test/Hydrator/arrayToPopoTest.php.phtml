<?php echo '<?php' . "\n"; ?>
namespace <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\Hydrator;

use ApplicationTest\FixtureManager;
use <?php echo $this->dataObject->getNamespace(); ?>\DAO\<?php echo $this->dataObject->getEntityName(); ?>DAO;
use <?php echo $this->dataObject->getNamespace(); ?>\DataObject\<?php echo $this->dataObject->getEntityName(); ?>DataObject;
use <?php echo $this->dataObject->getNamespace(); ?>\Hydrator\<?php echo $this->dataObject->getEntityName(); ?>Hydrator;
use <?php echo $this->unitTestNamespace; ?>\<?php echo $this->dataObject->getNamespace(); ?>\<?php echo $this->dataObject->getEntityName(); ?>Fixture;

<?php
    $loremIpsumGenerator = new \CrudGenerator\Utils\LoremIpsumGenerator();
?>
class arrayToPopoTest extends \PHPUnit_Framework_TestCase
{
    public function testArrayToPopo()
    {
    $arrayDto = array();
<?php
$fixtureRender = (function($metadata) use($loremIpsumGenerator) {
    if($metadata->getType() == 'integer' || $metadata->getType() == 'float') {
        return rand(0, 50);
    } elseif($metadata->getType() == 'string') {
        return '"' . substr($loremIpsumGenerator->getContent($metadata->getLength(), 'plain'), 0, $metadata->getLength()) . '"';
    } elseif($metadata->getType() == 'date') {
        return 'new DateTime()';
    } elseif($metadata->getType() == 'bool') {
        return 'true';
    }
});

$keyTestable = array();
$columnCollection = $this->dataObject->getMetadata()->getColumnCollection();
foreach($columnCollection as $field => $metadata):
/*if(isset($metadata['id']) && $metadata['id'] == true) {
    continue;
}*/
$keyToTest = null;
$modifiedValue = $fixtureRender($metadata);
?>
       $arrayDto['<?php echo $metadata->getName(); ?>'] = <?php echo $fixtureRender($metadata); ?>;
<?php endforeach; ?>

       $hydrator = new <?php echo $this->dataObject->getEntityName(); ?>Hydrator();
       $dto = $hydrator->arrayToPopo($arrayDto, new <?php echo $this->dataObject->getEntityName(); ?>DataObject());

<?php
$columnCollection = $this->dataObject->getMetadata()->getColumnCollection();
foreach($columnCollection as $field => $metadata): ?>
<?php
/*
if(isset($metadata['id']) && $metadata['id'] == true) {
    continue;
}*/
?>
        $this->assertEquals($dto->get<?php echo ucfirst($metadata->getName()); ?>(), $arrayDto['<?php echo $metadata->getName(); ?>']);
<?php endforeach; ?>
    }
}

