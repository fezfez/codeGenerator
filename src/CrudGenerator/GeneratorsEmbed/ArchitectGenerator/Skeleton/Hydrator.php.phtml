<?php
echo '<?php' . "\n";
$databaseConnectorClassName     = $this->renderFile(__DIR__ . '/environnement/' . $this->architectGenerator->getEnvironnement('backend') . '/className.phtml');
$databaseConnectionVariableName = $this->renderFile(__DIR__ . '/environnement/' . $this->architectGenerator->getEnvironnement('backend') . '/variableName.phtml');
$typeReturnedByDatabase         = $this->renderFile(__DIR__ . '/environnement/' . $this->architectGenerator->getEnvironnement('backend') . '/typeReturnedByDatabase.phtml');
$concreteTypeReturnedByDatabase = $this->renderFile(__DIR__ . '/environnement/' . $this->architectGenerator->getEnvironnement('backend') . '/concreteTypeReturnedByDatabase.phtml');

?>
namespace <?php echo $this->architectGenerator->getNamespace(); ?>\Hydrator;

use <?php echo $this->dtoNamespace; ?>;
use <?php echo $this->dtoCollectionNamespace; ?>;
<?php if ('doctrine2' === $this->architectGenerator->getEnvironnement('backend')): ?>
use <?php echo $this->architectGenerator->getMetadata()->getOriginalName(); ?>;
<?php endif; ?>

<?php
    $length = str_repeat(' ', strlen('a' . $this->modelName));
?>
class <?php echo $this->hydratorName . "\n"; ?>
{
    /**
     * @param <?php echo $typeReturnedByDatabase; ?> $entity
     * @param <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName . "\n"; ?>
     * @return <?php echo $this->dataObjectName . "\n"; ?>
     */
    public function entityToPopo(<?php echo ('doctrine2' === $this->architectGenerator->getEnvironnement('backend')) ? $this->architectGenerator->getMetadata()->getName() : $concreteTypeReturnedByDatabase; ?> $entity, <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName; ?>)
    {
<?php if ($typeReturnedByDatabase == 'entity'): ?>
        $<?php echo $this->modelName; ?> = clone $<?php echo $this->modelName; ?>;

<?php
$columnCollection = $this->architectGenerator->getMetadata()->getColumnCollection();
foreach($columnCollection as $field => $metadata): ?>
<?php if($metadata == $this->architectGenerator->getMetadata()->getColumnCollection()->first()): ?>
        $<?php echo $this->modelName; ?>->set<?php echo $metadata->getName(true); ?>($entity->get<?php echo $metadata->getName(true); ?>())<?php echo "\n"; ?>
<?php else: ?>
        <?php echo $length; ?>->set<?php echo $metadata->getName(true); ?>($entity->get<?php echo $metadata->getName(true); ?>())<?php if($metadata == $this->architectGenerator->getMetadata()->getColumnCollection()->end()): ?>;<?php endif; ?><?php echo "\n"; ?>
<?php endif; ?>
<?php endforeach; ?>
<?php else:?>

<?php
$columnCollection = $this->architectGenerator->getMetadata()->getColumnCollection();
foreach($columnCollection as $field => $metadata): ?>
<?php if($metadata == $this->architectGenerator->getMetadata()->getColumnCollection()->first()): ?>
        $<?php echo $this->modelName; ?>->set<?php echo $metadata->getName(true); ?>($entity['<?php echo $metadata->getName(); ?>'])<?php echo "\n"; ?>
<?php else: ?>
        <?php echo $length; ?>->set<?php echo $this->architectGenerator->getAttributeName($metadata->getName()); ?>($entity['<?php echo $metadata->getOrininalName(); ?>'])<?php if($metadata == $this->architectGenerator->getMetadata()->getColumnCollection()->end()): ?>;<?php endif; ?><?php echo "\n"; ?>
<?php endif; ?>
<?php endforeach; ?>
<?php endif; ?>

       return $<?php echo $this->modelName; ?>;
    }

    /**
     * @param <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName . "\n"; ?>
     * @param <?php echo $this->modelName; ?> $entity
     * @return <?php echo $this->dataObjectName . "\n"; ?>
     */
    public function popoToEntity(<?php echo $this->dataObjectName; ?> $<?php echo $this->modelName; ?>, <?php echo ('doctrine2' === $this->architectGenerator->getEnvironnement('backend')) ? $this->architectGenerator->getMetadata()->getName() : $concreteTypeReturnedByDatabase; ?> $entity)
    {
<?php
$columnCollection = $this->architectGenerator->getMetadata()->getColumnCollection();
foreach($columnCollection as $field => $metadata): ?>
<?php if($metadata == $this->architectGenerator->getMetadata()->getColumnCollection()->first()) continue; ?>
<?php if ($typeReturnedByDatabase == 'entity'): ?>
        $entity->set<?php echo $metadata->getName(true); ?>($<?php echo $this->modelName; ?>->get<?php echo $this->architectGenerator->getAttributeName($metadata->getName()); ?>());<?php echo "\n"; ?>
<?php else: ?>
        $entity['<?php echo $metadata->getOrininalName(); ?>'] = $<?php echo $this->modelName; ?>->get<?php echo $this->architectGenerator->getAttributeName($metadata->getName()); ?>();<?php echo "\n"; ?>
<?php endif; ?>
<?php endforeach; ?>

       return $entity;
    }

    /**
     * @param array $entityCollection
     * @param <?php echo $this->collectionName; ?> $dataObjectCollection
     * @param <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName . "\n"; ?>
     * @return <?php echo $this->collectionName . "\n"; ?>
     */
    public function entityCollectionToPopoCollection(
        array $entityCollection,
        <?php echo $this->collectionName; ?> $dataObjectCollection,
        <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName; ?>)
    {
        $dataObjectCollection = clone $dataObjectCollection;

        foreach($entityCollection as $entity) {
            $dataObjectCollection->append($this->entityToPopo($entity, $<?php echo $this->modelName; ?>));
        }

        return $dataObjectCollection;
    }
}
