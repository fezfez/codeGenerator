<?php
echo '<?php' . "\n";
$databaseConnectorClassName     = $this->getHelper('TemplateDatabaseConnector')->getClassName($this->architectGenerator);
$databaseConnectionVariableName = $this->getHelper('TemplateDatabaseConnector')->getVariableName($this->architectGenerator);

?>
namespace <?php echo $this->unitTestNamespace; ?>;

use DateTime;
use <?php echo $this->getHelper('TemplateDatabaseConnector')->getFullClass($this->architectGenerator); ?>;
use <?php echo $this->dtoNamespace; ?>;
use <?php echo $this->hydratorNamespace; ?>;
<?php echo $this->getHelper('TemplateServiceContainer')->getFullClassForUnitTest($this->architectGenerator); ?>

<?php
    $length = str_repeat(' ', strlen('a' . $this->architectGenerator->getEntityName()));
?>
class <?php echo $this->fixtureName . "\n"; ?>
{
    /**
     * @var <?php echo $databaseConnectorClassName . "\n"; ?>
     */
    private $<?php echo $databaseConnectionVariableName; ?> = null;
    /**
     * @var <?php echo $this->hydratorName . "\n"; ?>
     */
    private $hydrator = null;

    /**
     * @param <?php echo $this->hydratorName; ?> $hydrator
     * @param <?php echo $databaseConnectorClassName; ?> $<?php echo $databaseConnectionVariableName . "\n"; ?>
     */
    public function __construct(<?php echo $this->hydratorName; ?> $hydrator, <?php echo $databaseConnectorClassName; ?> $<?php echo $databaseConnectionVariableName; ?>)
    {
        $this->hydrator = $hydrator;
        $this-><?php echo $databaseConnectionVariableName; ?> = $<?php echo $databaseConnectionVariableName; ?>;
    }

    /**
     * Retrieve fixture
     * @return <?php echo $this->dataObjectName . "\n"; ?>
     */
    public function getFixture()
    {
        $dataObject = new <?php echo $this->dataObjectName; ?>();
        $dataObject<?php
$columnCollection = $this->architectGenerator->getMetadata()->getColumnCollection(true);
foreach($columnCollection as $field => $metadata):
if($metadata == reset($columnCollection)): ?>
->set<?php echo $this->getHelper('Text')->toCamelCase($this->architectGenerator->getAttributeName($metadata->getName()), true); ?>(<?php echo $this->getHelper('FixtureRenderer')->render($metadata); ?>)<?php if($metadata == end($columnCollection)): ?>;<?php endif; ?><?php echo "\n"; ?>
<?php else: ?>
                   ->set<?php echo $this->getHelper('Text')->toCamelCase($this->architectGenerator->getAttributeName($metadata->getName()), true); ?>(<?php echo $this->getHelper('FixtureRenderer')->render($metadata); ?>)<?php if($metadata == end($columnCollection)): ?>;<?php endif; ?><?php echo "\n"; ?>
<?php endif; ?>
<?php endforeach; ?>

        return $dataObject;
    }

    /**
     * Load Fixture in database
     * @return <?php echo $this->dataObjectName . "\n"; ?>
     */
    public function loadFixture()
    {
        $fixture = $this->getFixture();
        $result  = $this->hydrator->popoToEntity(
            $fixture,
<?php if ($this->getHelper('TemplateDatabaseConnector')->getTypeReturnedByDatabase($this->architectGenerator) == 'entity'): ?>
            new <?php echo $this->modelName; ?>()
<?php elseif ($this->getHelper('TemplateDatabaseConnector')->getTypeReturnedByDatabase($this->architectGenerator) == 'array'): ?>
            array()
<?php endif; ?>
        );

        <?php echo $this->getHelper('TemplateDatabaseConnector')->getPersistQuery($this->architectGenerator) . "\n"; ?>

        return $this->hydrator->entityToPopo(
            $result,
            new <?php echo $this->dataObjectName . "\n"; ?>
        );
    }

    /**
     * Purge table
     */
    public function purge()
    {
        <?php echo $this->getHelper('TemplateDatabaseConnector')->getPurgeQueryForUnitTest($this->architectGenerator) . "\n"; ?>
    }
}
