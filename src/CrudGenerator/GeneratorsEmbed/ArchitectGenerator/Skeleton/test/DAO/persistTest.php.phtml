<?php
echo '<?php' . "\n";
?>
namespace <?php echo $this->unitTestNamespace; ?>\<?php echo $this->daoName; ?>;

use <?php echo $this->fixtureFactoryNamespace; ?>;
use <?php echo $this->hydratorNamespace; ?>;
use <?php echo $this->dtoNamespace; ?>;
use <?php echo $this->daoNamespace; ?>;

class PersistTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var <?php echo $this->fixtureName . "\n"; ?>
     */
    private static $fixtureManager = null;

    public static function setUpBeforeClass()
    {
        self::$fixtureManager = <?php echo $this->fixtureFactoryName; ?>::getInstance();
    }

    public static function tearDownAfterClass()
    {
        self::$fixtureManager->purge();
    }

    public function testPersist()
    {
        $dto = self::$fixtureManager->getFixture();

        $sUT = new <?php echo $this->daoName; ?>(
            self::$fixtureManager->getDatabaseConnection(),
            new <?php echo $this->hydratorName; ?>()
        );

        $dtoPersisted = $sUT->persist($dto);
        $dtoRetrive   = $sUT->find($dtoPersisted);

<?php
foreach($this->architectGenerator->getAttributeName() as $originalName => $name):
$isPk = $this->architectGenerator->getMetaData()->getColumn($originalName)->isPrimaryKey();
if ($isPk === true) {
    continue;
}
?>
        $this->assertEquals($dto->get<?php echo $this->getHelper('Text')->toCamelCase($name, true); ?>(), $dtoRetrive->get<?php echo $this->getHelper('Text')->toCamelCase($name, true); ?>());
<?php endforeach; ?>
    }
}
