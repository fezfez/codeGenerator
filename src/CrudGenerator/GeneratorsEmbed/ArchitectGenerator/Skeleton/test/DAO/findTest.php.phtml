<?php
echo '<?php' . "\n";
?>
namespace <?php echo $this->unitTestNamespace; ?>\<?php echo $this->daoName; ?>;

use <?php echo $this->fixtureFactoryNamespace; ?>;
use <?php echo $this->hydratorNamespace; ?>;
use <?php echo $this->dtoNamespace; ?>;
use <?php echo $this->daoNamespace; ?>;

class FindTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var <?php echo $this->fixtureName . "\n"; ?>
     */
    private static $fixtureManager = null;

    public static function setUpBeforeClass()
    {
        self::$fixtureManager = <?php echo $this->fixtureFactoryName; ?>::getInstance();
    }

    public function testFind()
    {
        $dataObject = self::$fixtureManager->loadFixture();

        $sUT = new <?php echo $this->daoName; ?>(
            self::$fixtureManager->getDatabaseConnection(),
            new <?php echo $this->hydratorName; ?>()
        );

        $results = $sUT->find($dataObject);

        $this->assertEquals($dataObject->getId(), $results->getId());

        $this->assertInstanceOf(
            '<?php echo $this->dtoNamespace; ?>',
            $results
        );
    }

    public function testError()
    {
        $dataObject = new <?php echo $this->dataObjectName; ?>();
        $dataObject->setId('10000');

        $sUT = new <?php echo $this->daoName; ?>(
            self::$fixtureManager->getDatabaseConnection(),
            new <?php echo $this->hydratorName; ?>()
        );

        $this->setExpectedException('<?php echo $this->exceptionNamespace; ?>');

        $sUT->find($dataObject);
    }
}
