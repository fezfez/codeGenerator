<?php
echo '<?php' . "\n";
$databaseConnectorClassName     = $this->getHelper('TemplateDatabaseConnector')->getClassName($this->architectGenerator);
$databaseConnectionVariableName = $this->getHelper('TemplateDatabaseConnector')->getVariableName($this->architectGenerator);

?>
namespace <?php echo $this->architectGenerator->getNamespace(); ?>\DAO;

use <?php echo $this->getHelper('TemplateDatabaseConnector')->getFullClass($this->architectGenerator); ?>;
use <?php echo $this->hydratorNamespace; ?>;
use <?php echo $this->dtoNamespace; ?>;
use <?php echo $this->dtoCollectionNamespace; ?>;
use <?php echo $this->exceptionNamespace; ?>;
use <?php echo $this->architectGenerator->getEntity(); ?>;

class <?php echo $this->daoName . "\n"; ?>
{
    /**
     * @var <?php echo $databaseConnectorClassName . "\n"; ?>
     */
    private $<?php echo $databaseConnectionVariableName; ?> = null;
    /**
     * @var <?php echo $this->hydratorName . "\n"; ?>
     */
    private $hydrator      = null;

    /**
     * @param <?php echo $databaseConnectorClassName; ?> $<?php echo $databaseConnectionVariableName . "\n"; ?>
     * @param <?php echo $this->hydratorName; ?> $hydrator
     */
    public function __construct(<?php echo $databaseConnectorClassName; ?> $<?php echo $databaseConnectionVariableName; ?>, <?php echo $this->hydratorName; ?> $hydrator)
    {
        $this-><?php echo $databaseConnectionVariableName; ?> = $<?php echo $databaseConnectionVariableName; ?>;
        $this->hydrator = $hydrator;
    }

    /**
     * @param <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName . "\n"; ?>
     * @throws <?php echo $this->exceptionName . "\n"; ?>
     * @return <?php echo $this->dataObjectName . "\n"; ?>
     */
    public function find(<?php echo $this->dataObjectName; ?> $<?php echo $this->modelName; ?>)
    {
        <?php echo $this->getHelper('TemplateDatabaseConnector')->getQueryFindOneBy($this->architectGenerator) . "\n"; ?>

        if(empty($result)) {
            throw new <?php echo $this->exceptionName; ?>('<?php echo $this->modelName; ?> not found');
        }

        return $this->hydrator->entityToPopo(
            $result,
            new <?php echo $this->dataObjectName . "\n"; ?>
        );
    }

    /**
     * @return <?php echo $this->collectionName . "\n"; ?>
     */
    public function findAll()
    {
        <?php echo $this->getHelper('TemplateDatabaseConnector')->getQueryFindAll($this->architectGenerator) . "\n"; ?>

        return $this->hydrator->entityCollectionToPopoCollection(
            $results,
            new <?php echo $this->collectionName; ?>,
            new <?php echo $this->dataObjectName . "\n"; ?>
        );
    }

    /**
     * @param <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName . "\n"; ?>
     * @return <?php echo $this->dataObjectName . "\n"; ?>
     */
    public function persist(<?php echo $this->dataObjectName; ?> $<?php echo $this->modelName; ?>)
    {
        $result = $this->hydrator->popoToEntity(
            $<?php echo $this->modelName; ?>,
<?php if ($this->getHelper('TemplateDatabaseConnector')->getTypeReturnedByDatabase($this->architectGenerator) == 'entity'): ?>
            new <?php echo $this->modelName; ?>()
<?php elseif ($this->getHelper('TemplateDatabaseConnector')->getTypeReturnedByDatabase($this->architectGenerator) == 'array'): ?>
            array()
<?php endif; ?>
        );

        <?php echo $this->getHelper('TemplateDatabaseConnector')->getPersistQuery($this->architectGenerator) . "\n"; ?>

        return $this->hydrator->entityToPopo(
            $result,
            new <?php echo $this->dataObjectName . "\n"; ?>
        );
    }

    /**
     * @param <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName . "\n"; ?>
     * @return <?php echo $this->dataObjectName . "\n"; ?>
     */
    public function modify(<?php echo $this->dataObjectName; ?> $<?php echo $this->modelName; ?>)
    {
        <?php echo $this->getHelper('TemplateDatabaseConnector')->getQueryFindOneBy($this->architectGenerator) . "\n"; ?>

        if(empty($result)) {
            throw new <?php echo $this->exceptionName; ?>('<?php echo $this->modelName; ?> not found');
        }

        $result = $this->hydrator->popoToEntity(
            $<?php echo $this->modelName; ?>,
            $result
        );

        <?php echo $this->getHelper('TemplateDatabaseConnector')->getModifyQuery($this->architectGenerator) . "\n"; ?>

        return $this->hydrator->entityToPopo(
            $result,
            new <?php echo $this->dataObjectName . "\n"; ?>
        );
    }

    /**
     * @param <?php echo $this->dataObjectName; ?> $<?php echo $this->modelName . "\n"; ?>
     * @throws <?php echo $this->exceptionName . "\n"; ?>
     */
    public function remove(<?php echo $this->dataObjectName; ?> $<?php echo $this->modelName; ?>)
    {
        <?php echo $this->getHelper('TemplateDatabaseConnector')->getQueryFindOneBy($this->architectGenerator) . "\n"; ?>

        if(empty($result)) {
            throw new <?php echo $this->exceptionName; ?>('<?php echo $this->modelName; ?> not found');
        }

        <?php echo $this->getHelper('TemplateDatabaseConnector')->getRemoveQuery($this->architectGenerator) . "\n"; ?>
    }
}
